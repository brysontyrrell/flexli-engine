AWSTemplateFormatVersion:  2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:

  LogLevel:
    Type: String

  SharedLayerArn:
    Type: String

  DefaultKeyId:
    Type: String

  MainTableName:
    Type: String

  WorkflowHistoryV1TableName:
    Type: String

  RunQueueName:
    Type: String

  RunQueueUrl:
    Type: String

  CognitoUserPoolArn:
    Type: String

  AppDomain:
    Type: String
    MinLength: 3

  HostedZoneId:
    Type: String

  CertificateArn:
    Type: String

Globals:

  Function:
    Architectures:
      - arm64
    Runtime: python3.10
    MemorySize: 256
    Handler: app.lambda_handler
    Tracing: Active
    Layers:
      - !Ref SharedLayerArn
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        DEFAULT_KEY_ID: !Ref DefaultKeyId
        TABLE_NAME: !Ref MainTableName
        WORKFLOW_HISTORY_V1_TABLE_NAME: !Ref WorkflowHistoryV1TableName

Resources:

  WorkflowsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: latest
      # OpenApiVersion: '3.0.2'
      # MergeDefinitions: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
            AuthorizationScopes:
              - workflows/admin
      # AccessLogSetting:
      #   DestinationArn: !GetAtt WorkflowsApiAccessLogs.Arn
      #   Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      Domain:
        DomainName: !Sub api.${AppDomain}
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref HostedZoneId
        SecurityPolicy: TLS_1_2
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 10
      TracingEnabled: true
      EndpointConfiguration:
        Type: REGIONAL

#  WorkflowsApiAccessLogs:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub /access-logs/${AWS::StackName}
#      RetentionInDays: 30

  ConnectorsV1Create:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./connectors_v1/create
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
        - DynamoDBWritePolicy:
            TableName: !Ref MainTableName
        - KMSEncryptPolicy:
            KeyId: !Ref DefaultKeyId
      Events:
        create:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: post
            Path: /v1/connectors

  ConnectorsV1CreateLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConnectorsV1Create}
      RetentionInDays: 30

  ConnectorsV1Read:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./connectors_v1/read
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
      Events:
        read:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: get
            Path: /v1/connectors/{connector_id}

  ConnectorsV1ReadLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConnectorsV1Read}
      RetentionInDays: 30

  ConnectorsDelete:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./connectors_v1/delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTableName
      Events:
        delete:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: delete
            Path: /v1/connectors/{connector_id}

  ConnectorsDeleteLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConnectorsDelete}
      RetentionInDays: 30

  ConnectorsV1List:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./connectors_v1/list
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
      Events:
        list:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: get
            Path: /v1/connectors

  ConnectorsV1ListLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConnectorsV1List}
      RetentionInDays: 30

# Workflows

  WorkflowsV1Create:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./workflows_v1/create
      Handler: app.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
        - DynamoDBWritePolicy:
            TableName: !Ref MainTableName
      Events:
        create:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: post
            Path: /v1/workflows

  WorkflowsV1CreateLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WorkflowsV1Create}
      RetentionInDays: 30

  WorkflowsV1List:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./workflows_v1/list
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
      Events:
        list:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: get
            Path: /v1/workflows

  WorkflowsV1ListLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WorkflowsV1List}
      RetentionInDays: 30

# Workflow Versions

  WorkflowVersionV1Read:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./workflow_versions_v1/read
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
      Events:
        list:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: get
            Path: /v1/workflows/{workflow_id}/version/{version}

  WorkflowVersionV1ReadLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WorkflowVersionV1Read}
      RetentionInDays: 30

  WorkflowVersionV1Delete:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./workflow_versions_v1/delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTableName
      Events:
        delete:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: delete
            Path: /v1/workflows/{workflow_id}/version/{version}

  WorkflowVersionV1DeleteLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WorkflowVersionV1Delete}
      RetentionInDays: 30

# Run Workflow

  RunWorkflowVersionV1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./run_v1/post
      Environment:
        Variables:
          RUN_QUEUE_URL: !Ref RunQueueUrl
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTableName
        - SQSSendMessagePolicy:
            QueueName: !Ref RunQueueName
      Events:
        list:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: post
            Path: /v1/run-workflow/{workflow_id}/version/{version}

  RunWorkflowVersionV1Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RunWorkflowVersionV1}
      RetentionInDays: 30

# Run History

  RunHistoryV1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./run_history_v1/list
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
      Events:
        list:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: get
            Path: /v1/run-history

  RunHistoryV1Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RunHistoryV1}
      RetentionInDays: 30

  RunHistoryByIdV1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./run_history_v1/list_id
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTableName
        - DynamoDBReadPolicy:
            TableName: !Ref WorkflowHistoryV1TableName
      Events:
        list:
          Type: Api
          Properties:
            RestApiId: !Ref WorkflowsApi
            Method: get
            Path: /v1/run-history/{run_id}

  RunHistoryByIdV1Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RunHistoryByIdV1}
      RetentionInDays: 30

Outputs:

  WorkflowsApiEndpoint:
    Value: !Sub https://${WorkflowsApi}.execute-api.${AWS::Region}.amazonaws.com/latest
