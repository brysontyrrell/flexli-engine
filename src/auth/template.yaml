AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:

  AppDomain:
    Type: String
    MinLength: 3

  SubDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9][a-z0-9\-]{1,61}[a-z0-9]$

  HostedZoneId:
    Type: String

  CertificateArn:
    Type: String

Resources:

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref SubDomain
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref SubDomain
      UserPoolId: !Ref UserPool

  UserPoolAppDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub auth.${AppDomain}
      CustomDomainConfig:
        CertificateArn: !Ref CertificateArn
      UserPoolId: !Ref UserPool

  UserPoolAppDomainRecord:
     Type: AWS::Route53::RecordSet
     Properties:
       HostedZoneId: !Ref HostedZoneId
       Name: !Sub auth.${AppDomain}
       Type: A
       AliasTarget:
         HostedZoneId: Z2FDTNDATAQYW2
         DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
         EvaluateTargetHealth: false

  WorkflowsApiResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: workflows
      Name: Workflows API
      UserPoolId: !Ref UserPool
      Scopes:
        - ScopeName: admin
          ScopeDescription: Full administrative access.

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: user-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost
        - http://localhost/authorize
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  AdminClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: admin-client
      UserPoolId: !Ref UserPool
      GenerateSecret: True
      AccessTokenValidity: 1
      TokenValidityUnits:
        AccessToken: hours
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - workflows/admin
    DependsOn:
      - WorkflowsApiResourceServer

  PreAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.10
      Handler: app.lambda_handler
      CodeUri: ./src/pre_authentication
      Events:
        preauth:
          Type: Cognito
          Properties:
            Trigger: PreAuthentication
            UserPool:
              Ref: UserPool

Outputs:

  CognitoUserPoolId:
    Value: !Ref UserPool

  CognitoUserPoolArn:
    Value: !GetAtt UserPool.Arn

  CognitoUserPoolDomain:
    Value: !Sub ${SubDomain}.auth.${AWS::Region}.amazoncognito.com

  CognitoUserPoolSignIn:
    Value: !Sub https://${SubDomain}.auth.${AWS::Region}.amazoncognito.com/login?response_type=code&client_id=${UserPoolClient}&redirect_uri=http://localhost

  AdminClientId:
    Value: !Ref AdminClient
